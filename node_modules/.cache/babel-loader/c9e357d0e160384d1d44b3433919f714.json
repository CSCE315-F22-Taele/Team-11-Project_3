{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAPIRequest = void 0;\nvar google_auth_library_1 = require(\"google-auth-library\");\nvar qs = require(\"qs\");\nvar stream = require(\"stream\");\nvar urlTemplate = require(\"url-template\");\nvar uuid = require(\"uuid\");\nvar extend = require(\"extend\");\nvar isbrowser_1 = require(\"./isbrowser\");\nvar h2 = require(\"./http2\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar pkg = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n  return obj !== null && typeof obj === 'object' && typeof obj.pipe === 'function' && obj.readable !== false && typeof obj._read === 'function' && typeof obj._readableState === 'object';\n}\nfunction getMissingParams(params, required) {\n  var missing = new Array();\n  required.forEach(function (param) {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  });\n  // If there are any required params missing, return their names in array,\n  // otherwise return null\n  return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n  if (callback) {\n    createAPIRequestAsync(parameters).then(function (r) {\n      return callback(null, r);\n    }, callback);\n  } else {\n    return createAPIRequestAsync(parameters);\n  }\n}\nexports.createAPIRequest = createAPIRequest;\nfunction createAPIRequestAsync(_x) {\n  return _createAPIRequestAsync.apply(this, arguments);\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nfunction _createAPIRequestAsync() {\n  _createAPIRequestAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(parameters) {\n    var _a, options, params, media, resource, authClient, defaultMime, headers, missingParams, originalUrl, path, multipartUpload, browserMultipartUpload, multipart, userAgent, authHeaders, mooOpts;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            browserMultipartUpload = function _browserMultipartUplo(multipart) {\n              var boundary = uuid.v4();\n              var finale = \"--\".concat(boundary, \"--\");\n              headers['content-type'] = \"multipart/related; boundary=\".concat(boundary);\n              var content = '';\n              var _iterator2 = _createForOfIteratorHelper(multipart),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var part = _step2.value;\n                  var preamble = \"--\".concat(boundary, \"\\r\\ncontent-type: \").concat(part['content-type'], \"\\r\\n\\r\\n\");\n                  content += preamble;\n                  if (typeof part.body === 'string') {\n                    content += part.body;\n                    content += '\\r\\n';\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              content += finale;\n              options.data = content;\n            };\n            multipartUpload = function _multipartUpload(multipart) {\n              var boundary = uuid.v4();\n              var finale = \"--\".concat(boundary, \"--\");\n              var rStream = new stream.PassThrough({\n                flush: function flush(callback) {\n                  this.push('\\r\\n');\n                  this.push(finale);\n                  callback();\n                }\n              });\n              var pStream = new ProgressStream();\n              var isStream = isReadableStream(multipart[1].body);\n              headers['content-type'] = \"multipart/related; boundary=\".concat(boundary);\n              var _iterator = _createForOfIteratorHelper(multipart),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var part = _step.value;\n                  var preamble = \"--\".concat(boundary, \"\\r\\ncontent-type: \").concat(part['content-type'], \"\\r\\n\\r\\n\");\n                  rStream.push(preamble);\n                  if (typeof part.body === 'string') {\n                    rStream.push(part.body);\n                    rStream.push('\\r\\n');\n                  } else {\n                    // Gaxios does not natively support onUploadProgress in node.js.\n                    // Pipe through the pStream first to read the number of bytes read\n                    // for the purpose of tracking progress.\n                    pStream.on('progress', function (bytesRead) {\n                      if (options.onUploadProgress) {\n                        options.onUploadProgress({\n                          bytesRead: bytesRead\n                        });\n                      }\n                    });\n                    part.body.pipe(pStream).pipe(rStream);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              if (!isStream) {\n                rStream.push(finale);\n                rStream.push(null);\n              }\n              options.data = rStream;\n            };\n            // Combine the GaxiosOptions options passed with this specific\n            // API call with the global options configured at the API Context\n            // level, or at the global level.\n            options = extend(true, {},\n            // Ensure we don't leak settings upstream\n            ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {},\n            // Google level options\n            parameters.context._options || {},\n            // Per-API options\n            parameters.options // API call params\n            );\n            params = extend(true, {},\n            // New base object\n            options.params,\n            // Combined global/per-api params\n            parameters.params // API call params\n            );\n\n            options.userAgentDirectives = options.userAgentDirectives || [];\n            media = params.media || {};\n            /**\n             * In a previous version of this API, the request body was stuffed in a field\n             * named `resource`.  This caused lots of problems, because it's not uncommon\n             * to have an actual named parameter required which is also named `resource`.\n             * This meant that users would have to use `resource_` in those cases, which\n             * pretty much nobody figures out on their own. The request body is now\n             * documented as being in the `requestBody` property, but we also need to keep\n             * using `resource` for reasons of back-compat. Cases that need to be covered\n             * here:\n             * - user provides just a `resource` with a request body\n             * - user provides both a `resource` and a `resource_`\n             * - user provides just a `requestBody`\n             * - user provides both a `requestBody` and a `resource`\n             */\n            resource = params.requestBody;\n            if (!params.requestBody && params.resource && (!parameters.requiredParams.includes('resource') || typeof params.resource !== 'string')) {\n              resource = params.resource;\n              delete params.resource;\n            }\n            delete params.requestBody;\n            authClient = params.auth || options.auth;\n            defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n            delete params.media;\n            delete params.auth;\n            // Grab headers from user provided options\n            headers = params.headers || {};\n            populateAPIHeader(headers);\n            delete params.headers;\n            // Un-alias parameters that were modified due to conflicts with reserved names\n            Object.keys(params).forEach(function (key) {\n              if (key.slice(-1) === '_') {\n                var newKey = key.slice(0, -1);\n                params[newKey] = params[key];\n                delete params[key];\n              }\n            });\n            // Check for missing required parameters in the API request\n            missingParams = getMissingParams(params, parameters.requiredParams);\n            if (!missingParams) {\n              _context.next = 20;\n              break;\n            }\n            throw new Error('Missing required parameters: ' + missingParams.join(', '));\n          case 20:\n            // Parse urls\n            if (options.url) {\n              options.url = urlTemplate.parse(options.url).expand(params);\n            }\n            if (parameters.mediaUrl) {\n              parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n            }\n            // Rewrite url if rootUrl is globally set\n            if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n              originalUrl = new URL(options.url);\n              path = originalUrl.href.substr(originalUrl.origin.length);\n              options.url = new URL(path, parameters.context._options.rootUrl).href;\n            }\n            // When forming the querystring, override the serializer so that array\n            // values are serialized like this:\n            // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n            // This serializer also encodes spaces in the querystring as `%20`,\n            // whereas the default serializer in gaxios encodes to a `+`.\n            options.paramsSerializer = function (params) {\n              return qs.stringify(params, {\n                arrayFormat: 'repeat'\n              });\n            };\n            // delete path params from the params object so they do not end up in query\n            parameters.pathParams.forEach(function (param) {\n              return delete params[param];\n            });\n            // if authClient is actually a string, use it as an API KEY\n            if (typeof authClient === 'string') {\n              params.key = params.key || authClient;\n              authClient = undefined;\n            }\n            if (parameters.mediaUrl && media.body) {\n              options.url = parameters.mediaUrl;\n              if (resource) {\n                params.uploadType = 'multipart';\n                multipart = [{\n                  'content-type': 'application/json',\n                  body: JSON.stringify(resource)\n                }, {\n                  'content-type': media.mimeType || resource && resource.mimeType || defaultMime,\n                  body: media.body\n                }];\n                if (!(0, isbrowser_1.isBrowser)()) {\n                  // gaxios doesn't support multipart/related uploads, so it has to\n                  // be implemented here.\n                  multipartUpload(multipart);\n                } else {\n                  browserMultipartUpload(multipart);\n                }\n              } else {\n                params.uploadType = 'media';\n                Object.assign(headers, {\n                  'content-type': media.mimeType || defaultMime\n                });\n                options.data = media.body;\n              }\n            } else {\n              options.data = resource || undefined;\n            }\n            options.headers = extend(true, options.headers || {}, headers);\n            options.params = params;\n            if (!(0, isbrowser_1.isBrowser)()) {\n              options.headers['Accept-Encoding'] = 'gzip';\n              options.userAgentDirectives.push({\n                product: 'google-api-nodejs-client',\n                version: pkg.version,\n                comment: 'gzip'\n              });\n              userAgent = options.userAgentDirectives.map(function (d) {\n                var line = \"\".concat(d.product, \"/\").concat(d.version);\n                if (d.comment) {\n                  line += \" (\".concat(d.comment, \")\");\n                }\n                return line;\n              }).join(' ');\n              options.headers['User-Agent'] = userAgent;\n            }\n            // By default gaxios treats any 2xx as valid, and all non 2xx status\n            // codes as errors.  This is a problem for HTTP 304s when used along\n            // with an eTag.\n            if (!options.validateStatus) {\n              options.validateStatus = function (status) {\n                return status >= 200 && status < 300 || status === 304;\n              };\n            }\n            // Retry by default\n            options.retry = options.retry === undefined ? true : options.retry;\n            delete options.auth; // is overridden by our auth code\n            // Perform the HTTP request.  NOTE: this function used to return a\n            // mikeal/request object. Since the transition to Axios, the method is\n            // now void.  This may be a source of confusion for users upgrading from\n            // version 24.0 -> 25.0 or up.\n            if (!(authClient && typeof authClient === 'object')) {\n              _context.next = 46;\n              break;\n            }\n            if (!options.http2) {\n              _context.next = 43;\n              break;\n            }\n            _context.next = 37;\n            return authClient.getRequestHeaders(options.url);\n          case 37:\n            authHeaders = _context.sent;\n            mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return _context.abrupt(\"return\", h2.request(mooOpts));\n          case 43:\n            return _context.abrupt(\"return\", authClient.request(options));\n          case 44:\n            _context.next = 47;\n            break;\n          case 46:\n            return _context.abrupt(\"return\", new google_auth_library_1.DefaultTransporter().request(options));\n          case 47:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createAPIRequestAsync.apply(this, arguments);\n}\nvar ProgressStream = /*#__PURE__*/function (_stream$Transform) {\n  _inherits(ProgressStream, _stream$Transform);\n  function ProgressStream() {\n    var _this;\n    _classCallCheck(this, ProgressStream);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProgressStream).apply(this, arguments));\n    _this.bytesRead = 0;\n    return _this;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _createClass(ProgressStream, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      this.bytesRead += chunk.length;\n      this.emit('progress', this.bytesRead);\n      this.push(chunk);\n      callback();\n    }\n  }]);\n  return ProgressStream;\n}(stream.Transform);\nfunction populateAPIHeader(headers) {\n  // TODO: we should eventually think about adding browser support for this\n  // populating the gl-web header (web support should also be added to\n  // google-auth-library-nodejs).\n  if (!(0, isbrowser_1.isBrowser)()) {\n    headers['x-goog-api-client'] = \"gdcl/\".concat(pkg.version, \" gl-node/\").concat(process.versions.node);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}