{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dns_v1beta2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar dns_v1beta2;\n(function (dns_v1beta2) {\n  /**\n   * Cloud DNS API\n   *\n   *\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const dns = google.dns('v1beta2');\n   * ```\n   */\n  var Dns = function Dns(options, google) {\n    _classCallCheck(this, Dns);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.changes = new Resource$Changes(this.context);\n    this.dnsKeys = new Resource$Dnskeys(this.context);\n    this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n    this.managedZones = new Resource$Managedzones(this.context);\n    this.policies = new Resource$Policies(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n    this.responsePolicies = new Resource$Responsepolicies(this.context);\n    this.responsePolicyRules = new Resource$Responsepolicyrules(this.context);\n  };\n  dns_v1beta2.Dns = Dns;\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n      this.context = context;\n    }\n    _createClass(Resource$Changes, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'changeId'],\n          pathParams: ['changeId', 'managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Changes;\n  }();\n  dns_v1beta2.Resource$Changes = Resource$Changes;\n  var Resource$Dnskeys = /*#__PURE__*/function () {\n    function Resource$Dnskeys(context) {\n      _classCallCheck(this, Resource$Dnskeys);\n      this.context = context;\n    }\n    _createClass(Resource$Dnskeys, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n          pathParams: ['dnsKeyId', 'managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Dnskeys;\n  }();\n  dns_v1beta2.Resource$Dnskeys = Resource$Dnskeys;\n  var Resource$Managedzoneoperations = /*#__PURE__*/function () {\n    function Resource$Managedzoneoperations(context) {\n      _classCallCheck(this, Resource$Managedzoneoperations);\n      this.context = context;\n    }\n    _createClass(Resource$Managedzoneoperations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'operation'],\n          pathParams: ['managedZone', 'operation', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Managedzoneoperations;\n  }();\n  dns_v1beta2.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n  var Resource$Managedzones = /*#__PURE__*/function () {\n    function Resource$Managedzones(context) {\n      _classCallCheck(this, Resource$Managedzones);\n      this.context = context;\n    }\n    _createClass(Resource$Managedzones, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Managedzones;\n  }();\n  dns_v1beta2.Resource$Managedzones = Resource$Managedzones;\n  var Resource$Policies = /*#__PURE__*/function () {\n    function Resource$Policies(context) {\n      _classCallCheck(this, Resource$Policies);\n      this.context = context;\n    }\n    _createClass(Resource$Policies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Policies;\n  }();\n  dns_v1beta2.Resource$Policies = Resource$Policies;\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n      this.context = context;\n    }\n    _createClass(Resource$Projects, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects;\n  }();\n  dns_v1beta2.Resource$Projects = Resource$Projects;\n  var Resource$Resourcerecordsets = /*#__PURE__*/function () {\n    function Resource$Resourcerecordsets(context) {\n      _classCallCheck(this, Resource$Resourcerecordsets);\n      this.context = context;\n    }\n    _createClass(Resource$Resourcerecordsets, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'name', 'type'],\n          pathParams: ['managedZone', 'name', 'project', 'type'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'name', 'type'],\n          pathParams: ['managedZone', 'name', 'project', 'type'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'managedZone', 'name', 'type'],\n          pathParams: ['managedZone', 'name', 'project', 'type'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Resourcerecordsets;\n  }();\n  dns_v1beta2.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n  var Resource$Responsepolicies = /*#__PURE__*/function () {\n    function Resource$Responsepolicies(context) {\n      _classCallCheck(this, Resource$Responsepolicies);\n      this.context = context;\n    }\n    _createClass(Resource$Responsepolicies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Responsepolicies;\n  }();\n  dns_v1beta2.Resource$Responsepolicies = Resource$Responsepolicies;\n  var Resource$Responsepolicyrules = /*#__PURE__*/function () {\n    function Resource$Responsepolicyrules(context) {\n      _classCallCheck(this, Resource$Responsepolicyrules);\n      this.context = context;\n    }\n    _createClass(Resource$Responsepolicyrules, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          pathParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          pathParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy'],\n          pathParams: ['project', 'responsePolicy'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          pathParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          pathParams: ['project', 'responsePolicy', 'responsePolicyRule'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Responsepolicyrules;\n  }();\n  dns_v1beta2.Resource$Responsepolicyrules = Resource$Responsepolicyrules;\n})(dns_v1beta2 = exports.dns_v1beta2 || (exports.dns_v1beta2 = {}));","map":null,"metadata":{},"sourceType":"script"}