{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.searchconsole_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar searchconsole_v1;\n(function (searchconsole_v1) {\n  /**\n   * Google Search Console API\n   *\n   * The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const searchconsole = google.searchconsole('v1');\n   * ```\n   */\n  var Searchconsole = function Searchconsole(options, google) {\n    _classCallCheck(this, Searchconsole);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.searchanalytics = new Resource$Searchanalytics(this.context);\n    this.sitemaps = new Resource$Sitemaps(this.context);\n    this.sites = new Resource$Sites(this.context);\n    this.urlInspection = new Resource$Urlinspection(this.context);\n    this.urlTestingTools = new Resource$Urltestingtools(this.context);\n  };\n  searchconsole_v1.Searchconsole = Searchconsole;\n  var Resource$Searchanalytics = /*#__PURE__*/function () {\n    function Resource$Searchanalytics(context) {\n      _classCallCheck(this, Resource$Searchanalytics);\n      this.context = context;\n    }\n    _createClass(Resource$Searchanalytics, [{\n      key: \"query\",\n      value: function query(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/searchAnalytics/query').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl'],\n          pathParams: ['siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Searchanalytics;\n  }();\n  searchconsole_v1.Resource$Searchanalytics = Resource$Searchanalytics;\n  var Resource$Sitemaps = /*#__PURE__*/function () {\n    function Resource$Sitemaps(context) {\n      _classCallCheck(this, Resource$Sitemaps);\n      this.context = context;\n    }\n    _createClass(Resource$Sitemaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl', 'feedpath'],\n          pathParams: ['feedpath', 'siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl', 'feedpath'],\n          pathParams: ['feedpath', 'siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl'],\n          pathParams: ['siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"submit\",\n      value: function submit(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl', 'feedpath'],\n          pathParams: ['feedpath', 'siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Sitemaps;\n  }();\n  searchconsole_v1.Resource$Sitemaps = Resource$Sitemaps;\n  var Resource$Sites = /*#__PURE__*/function () {\n    function Resource$Sites(context) {\n      _classCallCheck(this, Resource$Sites);\n      this.context = context;\n    }\n    _createClass(Resource$Sites, [{\n      key: \"add\",\n      value: function add(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl'],\n          pathParams: ['siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl'],\n          pathParams: ['siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites/{siteUrl}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['siteUrl'],\n          pathParams: ['siteUrl'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/webmasters/v3/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Sites;\n  }();\n  searchconsole_v1.Resource$Sites = Resource$Sites;\n  var Resource$Urlinspection = function Resource$Urlinspection(context) {\n    _classCallCheck(this, Resource$Urlinspection);\n    this.context = context;\n    this.index = new Resource$Urlinspection$Index(this.context);\n  };\n  searchconsole_v1.Resource$Urlinspection = Resource$Urlinspection;\n  var Resource$Urlinspection$Index = /*#__PURE__*/function () {\n    function Resource$Urlinspection$Index(context) {\n      _classCallCheck(this, Resource$Urlinspection$Index);\n      this.context = context;\n    }\n    _createClass(Resource$Urlinspection$Index, [{\n      key: \"inspect\",\n      value: function inspect(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/urlInspection/index:inspect').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Urlinspection$Index;\n  }();\n  searchconsole_v1.Resource$Urlinspection$Index = Resource$Urlinspection$Index;\n  var Resource$Urltestingtools = function Resource$Urltestingtools(context) {\n    _classCallCheck(this, Resource$Urltestingtools);\n    this.context = context;\n    this.mobileFriendlyTest = new Resource$Urltestingtools$Mobilefriendlytest(this.context);\n  };\n  searchconsole_v1.Resource$Urltestingtools = Resource$Urltestingtools;\n  var Resource$Urltestingtools$Mobilefriendlytest = /*#__PURE__*/function () {\n    function Resource$Urltestingtools$Mobilefriendlytest(context) {\n      _classCallCheck(this, Resource$Urltestingtools$Mobilefriendlytest);\n      this.context = context;\n    }\n    _createClass(Resource$Urltestingtools$Mobilefriendlytest, [{\n      key: \"run\",\n      value: function run(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/urlTestingTools/mobileFriendlyTest:run').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Urltestingtools$Mobilefriendlytest;\n  }();\n  searchconsole_v1.Resource$Urltestingtools$Mobilefriendlytest = Resource$Urltestingtools$Mobilefriendlytest;\n})(searchconsole_v1 = exports.searchconsole_v1 || (exports.searchconsole_v1 = {}));","map":null,"metadata":{},"sourceType":"script"}