{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _defineProperty = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.closeSession = exports.request = exports.sessions = void 0;\nvar http2 = require(\"http2\");\nvar zlib = require(\"zlib\");\nvar url_1 = require(\"url\");\nvar qs = require(\"qs\");\nvar extend = require(\"extend\");\nvar stream_1 = require(\"stream\");\nvar util = require(\"util\");\nvar process = require(\"process\");\nvar common_1 = require(\"gaxios/build/src/common\");\nvar _http2$constants = http2.constants,\n  HTTP2_HEADER_CONTENT_ENCODING = _http2$constants.HTTP2_HEADER_CONTENT_ENCODING,\n  HTTP2_HEADER_CONTENT_TYPE = _http2$constants.HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_METHOD = _http2$constants.HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH = _http2$constants.HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS = _http2$constants.HTTP2_HEADER_STATUS;\nvar DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */\nexports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */\nfunction request(_x) {\n  return _request.apply(this, arguments);\n}\nfunction _request() {\n  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n    var _Object$assign;\n    var opts, url, sessionData, pathWithQs, q, headers, res, chunks, session, req;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opts = extend(true, {}, config);\n            opts.validateStatus = opts.validateStatus || validateStatus;\n            opts.responseType = opts.responseType || 'json';\n            url = new url_1.URL(opts.url); // Check for an existing session to this host, or go create a new one.\n            sessionData = _getClient(url.host); // Since we're using this session, clear the timeout handle to ensure\n            // it stays in memory and connected for a while further.\n            if (sessionData.timeoutHandle !== undefined) {\n              clearTimeout(sessionData.timeoutHandle);\n            }\n            // Assemble the querystring based on config.params.  We're using the\n            // `qs` module to make life a little easier.\n            pathWithQs = url.pathname;\n            if (config.params && Object.keys(config.params).length > 0) {\n              q = qs.stringify(opts.params);\n              pathWithQs += \"?\".concat(q);\n            }\n            // Assemble the headers based on basic HTTP2 primitives (path, method) and\n            // custom headers sent from the consumer.  Note: I am using `Object.assign`\n            // here making the assumption these objects are not deep.  If it turns out\n            // they are, we may need to use the `extend` npm module for deep cloning.\n            headers = Object.assign({}, opts.headers, (_Object$assign = {}, _defineProperty(_Object$assign, HTTP2_HEADER_PATH, pathWithQs), _defineProperty(_Object$assign, HTTP2_HEADER_METHOD, config.method || 'GET'), _Object$assign)); // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n            // request path assumes that the `content-type` header is going to be set in\n            // the underlying HTTP Client. This hack provides bug for bug compatability\n            // with this bug in gaxios:\n            // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n            if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n              if (opts.responseType !== 'text') {\n                headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/json';\n              }\n            }\n            res = {\n              config: config,\n              request: {},\n              headers: [],\n              status: 0,\n              data: {},\n              statusText: ''\n            };\n            chunks = [];\n            session = sessionData.session;\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              try {\n                req = session.request(headers).on('response', function (headers) {\n                  res.headers = headers;\n                  res.status = Number(headers[HTTP2_HEADER_STATUS]);\n                  var stream = req;\n                  if (headers[HTTP2_HEADER_CONTENT_ENCODING] === 'gzip') {\n                    stream = req.pipe(zlib.createGunzip());\n                  }\n                  if (opts.responseType === 'stream') {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                  }\n                  stream.on('data', function (d) {\n                    chunks.push(d);\n                  }).on('error', function (err) {\n                    reject(err);\n                    return;\n                  }).on('end', function () {\n                    var buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var data = buf;\n                    if (buf) {\n                      if (opts.responseType === 'json') {\n                        try {\n                          data = JSON.parse(buf.toString('utf8'));\n                        } catch (_a) {\n                          data = buf.toString('utf8');\n                        }\n                      } else if (opts.responseType === 'text') {\n                        data = buf.toString('utf8');\n                      } else if (opts.responseType === 'arraybuffer') {\n                        data = buf.buffer;\n                      }\n                      res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                      var message = \"Request failed with status code \".concat(res.status, \". \");\n                      if (res.data && typeof res.data === 'object') {\n                        var body = util.inspect(res.data, {\n                          depth: 5\n                        });\n                        message = \"\".concat(message, \"\\n'\").concat(body);\n                      }\n                      reject(new common_1.GaxiosError(message, opts, res));\n                    }\n                    resolve(res);\n                    return;\n                  });\n                }).on('error', function (e) {\n                  reject(e);\n                  return;\n                });\n              } catch (e) {\n                closeSession(url);\n                reject(e);\n              }\n              res.request = req;\n              // If data was provided, write it to the request in the form of\n              // a stream, string data, or a basic object.\n              if (config.data) {\n                if (config.data instanceof stream_1.Stream) {\n                  config.data.pipe(req);\n                } else if (typeof config.data === 'string') {\n                  var data = Buffer.from(config.data);\n                  req.end(data);\n                } else if (typeof config.data === 'object') {\n                  var _data = JSON.stringify(config.data);\n                  req.end(_data);\n                }\n              }\n              // Create a timeout so the Http2Session will be cleaned up after\n              // a period of non-use. 500 milliseconds was chosen because it's\n              // a nice round number, and I don't know what would be a better\n              // choice. Keeping this channel open will hold a file descriptor\n              // which will prevent the process from exiting.\n              sessionData.timeoutHandle = setTimeout(function () {\n                closeSession(url);\n              }, 500);\n            }));\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _request.apply(this, arguments);\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */\nfunction validateStatus(status) {\n  return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */\nfunction _getClient(host) {\n  if (!exports.sessions[host]) {\n    if (DEBUG) {\n      console.log(\"Creating client for \".concat(host));\n    }\n    var session = http2.connect(\"https://\".concat(host));\n    session.on('error', function (e) {\n      console.error(\"*ERROR*: \".concat(e));\n      delete exports.sessions[host];\n    }).on('goaway', function (errorCode, lastStreamId) {\n      console.error(\"*GOAWAY*: \".concat(errorCode, \" : \").concat(lastStreamId));\n      delete exports.sessions[host];\n    });\n    exports.sessions[host] = {\n      session: session\n    };\n  } else {\n    if (DEBUG) {\n      console.log(\"Used cached client for \".concat(host));\n    }\n  }\n  return exports.sessions[host];\n}\nfunction closeSession(_x2) {\n  return _closeSession.apply(this, arguments);\n}\nfunction _closeSession() {\n  _closeSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n    var sessionData, session;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            sessionData = exports.sessions[url.host];\n            if (sessionData) {\n              _context2.next = 3;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 3:\n            session = sessionData.session;\n            delete exports.sessions[url.host];\n            if (DEBUG) {\n              console.error(\"Closing \".concat(url.host));\n            }\n            session.close(function () {\n              if (DEBUG) {\n                console.error(\"Closed \".concat(url.host));\n              }\n            });\n            setTimeout(function () {\n              if (session && !session.destroyed) {\n                if (DEBUG) {\n                  console.log(\"Forcing close \".concat(url.host));\n                }\n                if (session) {\n                  session.destroy();\n                }\n              }\n            }, 1000);\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _closeSession.apply(this, arguments);\n}\nexports.closeSession = closeSession;","map":null,"metadata":{},"sourceType":"script"}