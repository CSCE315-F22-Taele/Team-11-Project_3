{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toolresults_v1beta3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar toolresults_v1beta3;\n(function (toolresults_v1beta3) {\n  /**\n   * Cloud Tool Results API\n   *\n   * API to publish and access results from developer tools.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const toolresults = google.toolresults('v1beta3');\n   * ```\n   */\n  var Toolresults = function Toolresults(options, google) {\n    _classCallCheck(this, Toolresults);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n  toolresults_v1beta3.Toolresults = Toolresults;\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n      this.context = context;\n      this.histories = new Resource$Projects$Histories(this.context);\n    }\n    _createClass(Resource$Projects, [{\n      key: \"getSettings\",\n      value: function getSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"initializeSettings\",\n      value: function initializeSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}:initializeSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects;\n  }();\n  toolresults_v1beta3.Resource$Projects = Resource$Projects;\n  var Resource$Projects$Histories = /*#__PURE__*/function () {\n    function Resource$Projects$Histories(context) {\n      _classCallCheck(this, Resource$Projects$Histories);\n      this.context = context;\n      this.executions = new Resource$Projects$Histories$Executions(this.context);\n    }\n    _createClass(Resource$Projects$Histories, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories = Resource$Projects$Histories;\n  var Resource$Projects$Histories$Executions = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions);\n      this.context = context;\n      this.clusters = new Resource$Projects$Histories$Executions$Clusters(this.context);\n      this.environments = new Resource$Projects$Histories$Executions$Environments(this.context);\n      this.steps = new Resource$Projects$Histories$Executions$Steps(this.context);\n    }\n    _createClass(Resource$Projects$Histories$Executions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions = Resource$Projects$Histories$Executions;\n  var Resource$Projects$Histories$Executions$Clusters = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Clusters(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Clusters);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Clusters, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'clusterId'],\n          pathParams: ['clusterId', 'executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Clusters;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Clusters = Resource$Projects$Histories$Executions$Clusters;\n  var Resource$Projects$Histories$Executions$Environments = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Environments(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Environments);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Environments, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments/{environmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'environmentId'],\n          pathParams: ['environmentId', 'executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Environments;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Environments = Resource$Projects$Histories$Executions$Environments;\n  var Resource$Projects$Histories$Executions$Steps = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps);\n      this.context = context;\n      this.perfMetricsSummary = new Resource$Projects$Histories$Executions$Steps$Perfmetricssummary(this.context);\n      this.perfSampleSeries = new Resource$Projects$Histories$Executions$Steps$Perfsampleseries(this.context);\n      this.testCases = new Resource$Projects$Histories$Executions$Steps$Testcases(this.context);\n      this.thumbnails = new Resource$Projects$Histories$Executions$Steps$Thumbnails(this.context);\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps, [{\n      key: \"accessibilityClusters\",\n      value: function accessibilityClusters(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/{+name}:accessibilityClusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getPerfMetricsSummary\",\n      value: function getPerfMetricsSummary(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"publishXunitXmlFiles\",\n      value: function publishXunitXmlFiles(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps = Resource$Projects$Histories$Executions$Steps;\n  var Resource$Projects$Histories$Executions$Steps$Perfmetricssummary = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfmetricssummary(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfmetricssummary);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfmetricssummary, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps$Perfmetricssummary;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfmetricssummary = Resource$Projects$Histories$Executions$Steps$Perfmetricssummary;\n  var Resource$Projects$Histories$Executions$Steps$Perfsampleseries = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfsampleseries(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfsampleseries);\n      this.context = context;\n      this.samples = new Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples(this.context);\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfsampleseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps$Perfsampleseries;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries = Resource$Projects$Histories$Executions$Steps$Perfsampleseries;\n  var Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples, [{\n      key: \"batchCreate\",\n      value: function batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples = Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples;\n  var Resource$Projects$Histories$Executions$Steps$Testcases = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Testcases(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Testcases);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps$Testcases, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases/{testCaseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'testCaseId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId', 'testCaseId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps$Testcases;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Testcases = Resource$Projects$Histories$Executions$Steps$Testcases;\n  var Resource$Projects$Histories$Executions$Steps$Thumbnails = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Thumbnails(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Thumbnails);\n      this.context = context;\n    }\n    _createClass(Resource$Projects$Histories$Executions$Steps$Thumbnails, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://toolresults.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Projects$Histories$Executions$Steps$Thumbnails;\n  }();\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Thumbnails = Resource$Projects$Histories$Executions$Steps$Thumbnails;\n})(toolresults_v1beta3 = exports.toolresults_v1beta3 || (exports.toolresults_v1beta3 = {}));","map":null,"metadata":{},"sourceType":"script"}