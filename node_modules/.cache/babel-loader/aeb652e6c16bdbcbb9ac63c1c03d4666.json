{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clouddebugger_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar clouddebugger_v2;\n(function (clouddebugger_v2) {\n  /**\n   * Cloud Debugger API\n   *\n   * Examines the call stack and variables of a running application without stopping or slowing it down.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const clouddebugger = google.clouddebugger('v2');\n   * ```\n   */\n  var Clouddebugger = function Clouddebugger(options, google) {\n    _classCallCheck(this, Clouddebugger);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.controller = new Resource$Controller(this.context);\n    this.debugger = new Resource$Debugger(this.context);\n  };\n  clouddebugger_v2.Clouddebugger = Clouddebugger;\n  var Resource$Controller = function Resource$Controller(context) {\n    _classCallCheck(this, Resource$Controller);\n    this.context = context;\n    this.debuggees = new Resource$Controller$Debuggees(this.context);\n  };\n  clouddebugger_v2.Resource$Controller = Resource$Controller;\n  var Resource$Controller$Debuggees = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees);\n      this.context = context;\n      this.breakpoints = new Resource$Controller$Debuggees$Breakpoints(this.context);\n    }\n    _createClass(Resource$Controller$Debuggees, [{\n      key: \"register\",\n      value: function register(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Controller$Debuggees;\n  }();\n  clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;\n  var Resource$Controller$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees$Breakpoints);\n      this.context = context;\n    }\n    _createClass(Resource$Controller$Debuggees$Breakpoints, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId', 'id'],\n          pathParams: ['debuggeeId', 'id'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Controller$Debuggees$Breakpoints;\n  }();\n  clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;\n  var Resource$Debugger = function Resource$Debugger(context) {\n    _classCallCheck(this, Resource$Debugger);\n    this.context = context;\n    this.debuggees = new Resource$Debugger$Debuggees(this.context);\n  };\n  clouddebugger_v2.Resource$Debugger = Resource$Debugger;\n  var Resource$Debugger$Debuggees = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees);\n      this.context = context;\n      this.breakpoints = new Resource$Debugger$Debuggees$Breakpoints(this.context);\n    }\n    _createClass(Resource$Debugger$Debuggees, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Debugger$Debuggees;\n  }();\n  clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;\n  var Resource$Debugger$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees$Breakpoints);\n      this.context = context;\n    }\n    _createClass(Resource$Debugger$Debuggees$Breakpoints, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"set\",\n      value: function set(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Debugger$Debuggees$Breakpoints;\n  }();\n  clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;\n})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));","map":null,"metadata":{},"sourceType":"script"}