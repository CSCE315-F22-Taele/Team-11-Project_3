{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blogger_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar blogger_v3;\n(function (blogger_v3) {\n  /**\n   * Blogger API\n   *\n   * The Blogger API provides access to posts, comments and pages of a Blogger blog.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const blogger = google.blogger('v3');\n   * ```\n   */\n  var Blogger = function Blogger(options, google) {\n    _classCallCheck(this, Blogger);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.blogs = new Resource$Blogs(this.context);\n    this.blogUserInfos = new Resource$Bloguserinfos(this.context);\n    this.comments = new Resource$Comments(this.context);\n    this.pages = new Resource$Pages(this.context);\n    this.pageViews = new Resource$Pageviews(this.context);\n    this.posts = new Resource$Posts(this.context);\n    this.postUserInfos = new Resource$Postuserinfos(this.context);\n    this.users = new Resource$Users(this.context);\n  };\n  blogger_v3.Blogger = Blogger;\n  var Resource$Blogs = /*#__PURE__*/function () {\n    function Resource$Blogs(context) {\n      _classCallCheck(this, Resource$Blogs);\n      this.context = context;\n    }\n    _createClass(Resource$Blogs, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getByUrl\",\n      value: function getByUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/byurl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['url'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"listByUser\",\n      value: function listByUser(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/users/{userId}/blogs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Blogs;\n  }();\n  blogger_v3.Resource$Blogs = Resource$Blogs;\n  var Resource$Bloguserinfos = /*#__PURE__*/function () {\n    function Resource$Bloguserinfos(context) {\n      _classCallCheck(this, Resource$Bloguserinfos);\n      this.context = context;\n    }\n    _createClass(Resource$Bloguserinfos, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'blogId'],\n          pathParams: ['blogId', 'userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Bloguserinfos;\n  }();\n  blogger_v3.Resource$Bloguserinfos = Resource$Bloguserinfos;\n  var Resource$Comments = /*#__PURE__*/function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n      this.context = context;\n    }\n    _createClass(Resource$Comments, [{\n      key: \"approve\",\n      value: function approve(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"listByBlog\",\n      value: function listByBlog(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"markAsSpam\",\n      value: function markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"removeContent\",\n      value: function removeContent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Comments;\n  }();\n  blogger_v3.Resource$Comments = Resource$Comments;\n  var Resource$Pages = /*#__PURE__*/function () {\n    function Resource$Pages(context) {\n      _classCallCheck(this, Resource$Pages);\n      this.context = context;\n    }\n    _createClass(Resource$Pages, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"publish\",\n      value: function publish(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"revert\",\n      value: function revert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Pages;\n  }();\n  blogger_v3.Resource$Pages = Resource$Pages;\n  var Resource$Pageviews = /*#__PURE__*/function () {\n    function Resource$Pageviews(context) {\n      _classCallCheck(this, Resource$Pageviews);\n      this.context = context;\n    }\n    _createClass(Resource$Pageviews, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/pageviews').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Pageviews;\n  }();\n  blogger_v3.Resource$Pageviews = Resource$Pageviews;\n  var Resource$Posts = /*#__PURE__*/function () {\n    function Resource$Posts(context) {\n      _classCallCheck(this, Resource$Posts);\n      this.context = context;\n    }\n    _createClass(Resource$Posts, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getByPath\",\n      value: function getByPath(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/bypath').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'path'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"publish\",\n      value: function publish(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"revert\",\n      value: function revert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'q'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Posts;\n  }();\n  blogger_v3.Resource$Posts = Resource$Posts;\n  var Resource$Postuserinfos = /*#__PURE__*/function () {\n    function Resource$Postuserinfos(context) {\n      _classCallCheck(this, Resource$Postuserinfos);\n      this.context = context;\n    }\n    _createClass(Resource$Postuserinfos, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'blogId', 'postId'],\n          pathParams: ['blogId', 'postId', 'userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'blogId'],\n          pathParams: ['blogId', 'userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Postuserinfos;\n  }();\n  blogger_v3.Resource$Postuserinfos = Resource$Postuserinfos;\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n      this.context = context;\n    }\n    _createClass(Resource$Users, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Users;\n  }();\n  blogger_v3.Resource$Users = Resource$Users;\n})(blogger_v3 = exports.blogger_v3 || (exports.blogger_v3 = {}));","map":null,"metadata":{},"sourceType":"script"}