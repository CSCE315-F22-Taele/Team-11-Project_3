{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/bradley/Code/teamgantt/react-auto-translate/src/translator.tsx\";\nimport React, { createContext } from 'react';\nvar defaultHandler = function defaultHandler() {};\nexport var TranslateContext = createContext(defaultHandler);\nexport var LanguageContext = createContext('en');\nexport default function Translator(_ref) {\n  var to = _ref.to,\n    from = _ref.from,\n    cacheProvider = _ref.cacheProvider,\n    children = _ref.children,\n    googleApiKey = _ref.googleApiKey;\n  var getCachedTranslation = function getCachedTranslation(value) {\n    if (!cacheProvider) {\n      return undefined;\n    }\n    return cacheProvider.get(to, value);\n  };\n  var setCachedTranslation = function setCachedTranslation(value, translation) {\n    if (!cacheProvider) {\n      return;\n    }\n    cacheProvider.set(to, value, translation);\n  };\n  var getGoogleTranslation = function getGoogleTranslation(value) {\n    var response, jsonResponse;\n    return _regeneratorRuntime.async(function getGoogleTranslation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://translation.googleapis.com/language/translate/v2?source=\" + from + \"&target=\" + to + \"&key=\" + googleApiKey + \"&q=\" + value + \"&format=text\"));\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n          case 6:\n            jsonResponse = _context.sent;\n            return _context.abrupt(\"return\", jsonResponse.data.translations[0].translatedText);\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", undefined);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n  var handleTranslationAsync = function handleTranslationAsync(value, setTranslation) {\n    var cachedTranslation, translatedText;\n    return _regeneratorRuntime.async(function handleTranslationAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(to === from)) {\n              _context2.next = 3;\n              break;\n            }\n            setTranslation(value);\n            return _context2.abrupt(\"return\");\n          case 3:\n            cachedTranslation = getCachedTranslation(value);\n            if (!cachedTranslation) {\n              _context2.next = 7;\n              break;\n            }\n            setTranslation(cachedTranslation);\n            return _context2.abrupt(\"return\");\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getGoogleTranslation(value));\n          case 9:\n            translatedText = _context2.sent;\n            if (!translatedText) {\n              _context2.next = 14;\n              break;\n            }\n            setCachedTranslation(value, translatedText);\n            setTranslation(translatedText);\n            return _context2.abrupt(\"return\");\n          case 14:\n            setTranslation(value);\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n  return React.createElement(TranslateContext.Provider, {\n    value: handleTranslationAsync,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    }\n  }, React.createElement(LanguageContext.Provider, {\n    value: to,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    }\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}