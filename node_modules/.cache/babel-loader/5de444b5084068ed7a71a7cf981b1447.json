{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.domainsrdap_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar domainsrdap_v1;\n(function (domainsrdap_v1) {\n  /**\n   * Domains RDAP API\n   *\n   * Read-only public API that lets users search for information about domain names.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const domainsrdap = google.domainsrdap('v1');\n   * ```\n   */\n  var Domainsrdap = function Domainsrdap(options, google) {\n    _classCallCheck(this, Domainsrdap);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.autnum = new Resource$Autnum(this.context);\n    this.domain = new Resource$Domain(this.context);\n    this.entity = new Resource$Entity(this.context);\n    this.ip = new Resource$Ip(this.context);\n    this.nameserver = new Resource$Nameserver(this.context);\n    this.v1 = new Resource$V1(this.context);\n  };\n  domainsrdap_v1.Domainsrdap = Domainsrdap;\n  var Resource$Autnum = /*#__PURE__*/function () {\n    function Resource$Autnum(context) {\n      _classCallCheck(this, Resource$Autnum);\n      this.context = context;\n    }\n    _createClass(Resource$Autnum, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/autnum/{autnumId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['autnumId'],\n          pathParams: ['autnumId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Autnum;\n  }();\n  domainsrdap_v1.Resource$Autnum = Resource$Autnum;\n  var Resource$Domain = /*#__PURE__*/function () {\n    function Resource$Domain(context) {\n      _classCallCheck(this, Resource$Domain);\n      this.context = context;\n    }\n    _createClass(Resource$Domain, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/domain/{+domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['domainName'],\n          pathParams: ['domainName'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Domain;\n  }();\n  domainsrdap_v1.Resource$Domain = Resource$Domain;\n  var Resource$Entity = /*#__PURE__*/function () {\n    function Resource$Entity(context) {\n      _classCallCheck(this, Resource$Entity);\n      this.context = context;\n    }\n    _createClass(Resource$Entity, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/entity/{entityId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['entityId'],\n          pathParams: ['entityId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Entity;\n  }();\n  domainsrdap_v1.Resource$Entity = Resource$Entity;\n  var Resource$Ip = /*#__PURE__*/function () {\n    function Resource$Ip(context) {\n      _classCallCheck(this, Resource$Ip);\n      this.context = context;\n    }\n    _createClass(Resource$Ip, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/ip/{ipId}/{ipId1}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ipId', 'ipId1'],\n          pathParams: ['ipId', 'ipId1'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Ip;\n  }();\n  domainsrdap_v1.Resource$Ip = Resource$Ip;\n  var Resource$Nameserver = /*#__PURE__*/function () {\n    function Resource$Nameserver(context) {\n      _classCallCheck(this, Resource$Nameserver);\n      this.context = context;\n    }\n    _createClass(Resource$Nameserver, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/nameserver/{nameserverId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['nameserverId'],\n          pathParams: ['nameserverId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Nameserver;\n  }();\n  domainsrdap_v1.Resource$Nameserver = Resource$Nameserver;\n  var Resource$V1 = /*#__PURE__*/function () {\n    function Resource$V1(context) {\n      _classCallCheck(this, Resource$V1);\n      this.context = context;\n    }\n    _createClass(Resource$V1, [{\n      key: \"getDomains\",\n      value: function getDomains(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getEntities\",\n      value: function getEntities(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/entities').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getHelp\",\n      value: function getHelp(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/help').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getIp\",\n      value: function getIp(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/ip').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"getNameservers\",\n      value: function getNameservers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://domainsrdap.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/nameservers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$V1;\n  }();\n  domainsrdap_v1.Resource$V1 = Resource$V1;\n})(domainsrdap_v1 = exports.domainsrdap_v1 || (exports.domainsrdap_v1 = {}));","map":null,"metadata":{},"sourceType":"script"}