{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\hholt\\\\Downloads\\\\Team-11-Project_3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.civicinfo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar civicinfo_v2;\n(function (civicinfo_v2) {\n  /**\n   * Google Civic Information API\n   *\n   * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const civicinfo = google.civicinfo('v2');\n   * ```\n   */\n  var Civicinfo = function Civicinfo(options, google) {\n    _classCallCheck(this, Civicinfo);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.divisions = new Resource$Divisions(this.context);\n    this.elections = new Resource$Elections(this.context);\n    this.representatives = new Resource$Representatives(this.context);\n  };\n  civicinfo_v2.Civicinfo = Civicinfo;\n  var Resource$Divisions = /*#__PURE__*/function () {\n    function Resource$Divisions(context) {\n      _classCallCheck(this, Resource$Divisions);\n      this.context = context;\n    }\n    _createClass(Resource$Divisions, [{\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://civicinfo.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/civicinfo/v2/divisions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Divisions;\n  }();\n  civicinfo_v2.Resource$Divisions = Resource$Divisions;\n  var Resource$Elections = /*#__PURE__*/function () {\n    function Resource$Elections(context) {\n      _classCallCheck(this, Resource$Elections);\n      this.context = context;\n    }\n    _createClass(Resource$Elections, [{\n      key: \"electionQuery\",\n      value: function electionQuery(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://civicinfo.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/civicinfo/v2/elections').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"voterInfoQuery\",\n      value: function voterInfoQuery(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://civicinfo.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/civicinfo/v2/voterinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['address'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Elections;\n  }();\n  civicinfo_v2.Resource$Elections = Resource$Elections;\n  var Resource$Representatives = /*#__PURE__*/function () {\n    function Resource$Representatives(context) {\n      _classCallCheck(this, Resource$Representatives);\n      this.context = context;\n    }\n    _createClass(Resource$Representatives, [{\n      key: \"representativeInfoByAddress\",\n      value: function representativeInfoByAddress(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://civicinfo.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/civicinfo/v2/representatives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"representativeInfoByDivision\",\n      value: function representativeInfoByDivision(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://civicinfo.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/civicinfo/v2/representatives/{ocdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ocdId'],\n          pathParams: ['ocdId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Representatives;\n  }();\n  civicinfo_v2.Resource$Representatives = Resource$Representatives;\n})(civicinfo_v2 = exports.civicinfo_v2 || (exports.civicinfo_v2 = {}));","map":null,"metadata":{},"sourceType":"script"}